<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ニコキタ教育委員会：解答完了</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: sans-serif;
            min-height: 100vh;
            background-color: white;
        }

        .header {
            background-color: #F47B20;
            color: white;
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-title {
            font-size: 1.5em;
        }

        .content {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: calc(100vh - 60px);
            padding: 20px;
            text-align: center;
        }

        .completion-message {
            font-size: 2.5em;
            margin-bottom: 30px;
        }

        .waiting-message {
            font-size: 1.2em;
        }

        .menu-button {
            background: none;
            border: none;
            cursor: pointer;
            padding: 0.5rem;
        }

        .menu-line {
            width: 24px;
            height: 2px;
            background-color: white;
            margin: 4px 0;
        }

        /* サイドメニューのスタイル */
        .sidebar {
            width: 500px;
            background-color: #f9f9f9;
            position: fixed;
            top: 0;
            left: 0;
            height: 100%;
            padding-top: 60px;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
            transition: transform 0.3s ease;
            transform: translateX(-100%);
            z-index: 2000; 
        }

        .sidebar a {
            display: block;
            padding: 1.2rem 1.5rem; /* クリック範囲を広げるためにパディングを増やす */
            color: #0066cc;
            text-decoration: none;
            font-size: 20px; /* フォントサイズを大きくすることで視認性を向上 */
            font-weight: bold;
        }

        .sidebar.active {
            transform: translateX(0);
        }
    </style>
</head>
<body>
    <script src ="/socket.io/socket.io.js"></script>
    <header class="header">
        <button class="menu-button" aria-label="メニュー">
            <div class="menu-line"></div>
            <div class="menu-line"></div>
            <div class="menu-line"></div>
        </button>
        <div class="header-title">ニコキタ教育委員会：解答完了</div>
        <div>ユーザー：student</div>
    </header>

    <nav class="sidebar" id="sidebar">
        <a href="javascript:void(0);" onclick="logout()">ログアウト</a>
    </nav>

    <div class="content">
        <div class="completion-message">解答完了</div>
        <div class="waiting-message">採点中です。しばらくお待ちください。</div>
    </div>
</body>
<script>
    const socket = io({ transports: ['websocket'], upgrade: false });
    const room_ID = 'teacher';
    const role = 2
    if (room_ID) {
            socket.emit('join_room', { room_ID, role });
            console.log(`ルーム ${room_ID} に参加しました (役割: ${role})`);
    } else {
        console.error('ルームIDが指定されていません。');
    }
    socket.on('modoru',function(){
        window.location.href='/kaitou'
    })

    const menuButton = document.querySelector('.menu-button'); // メニューボタンを取得
            const sidebar = document.getElementById('sidebar'); // サイドバーを取得
            const mainContent = document.querySelector('.main-content'); // メインコンテンツを取得

            // メニューボタンのクリックイベント
            menuButton.addEventListener('click', () => {
                sidebar.classList.toggle('active'); // サイドバーの表示切り替え
                mainContent.classList.toggle('sidebar-active'); // メインコンテンツの余白調整
            });

            // ドキュメント全体でクリックされたときの処理
            document.addEventListener('click', (event) => {
                if (!menuButton.contains(event.target) && !sidebar.contains(event.target)) {
                    sidebar.classList.remove('active'); // サイドバーを非表示にする
                    mainContent.classList.remove('sidebar-active'); // 余白調整を解除
                }
            });

            //ログアウト処理
            async function logout() {
                try {
                    await new Promise((resolve, reject) => {
                        socket.emit('session_destroy', (response) => {
                            if (response.success) resolve();
                            else reject(response.error);
                        });
                    });
                    // 成功時はログインページにリダイレクト
                    window.location.href = '/login';
                } catch (error) {
                    alert('ログアウトに失敗しました: ' + error);
                }
            }
            
            socket.on('session_destroy_success', () => {
                window.location.href = '/login';
            });
</script>
</html>