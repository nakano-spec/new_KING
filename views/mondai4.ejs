<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>回答一覧</title>
    <style>
      .scroll-container {
        display: flex;
        max-height: 400px;
        overflow-y: auto;
        padding: 10px;
      }
      .table-container {
        display: flex;
      }
      table {
        border-collapse: collapse;
        text-align: center;
        width: 417px;
        table-layout: fixed;
      }
      .example {
        width: 1100px;
        table-layout: fixed;
      }
      th, td {
        padding: 5px;
        border: 1px solid #333;
      }
      th {
        background-color: #2c88d9;
        color: #FFF;
      }
      body {
        background-color: #fffca9;
        background-size: cover;
      }
      .button-container {
        display: flex;
        flex-direction: column;
        padding-left: 10px;
      }
      .button-container button {
        margin-bottom: 1px;
      }
    </style>
    </style>
  </head>
  <body>
    <script src ='/socket.io/socket.io.js'></script>
    <h1>回答一覧</h1>
    <div　class="scroll-container">
    <ul>
      <div class = "table-container">
        <table  id ="table" class ="example">
          <thead>
            <tr><th>資格名</th><th>年度</th><th>問題名</th><th>ジャンル</th><th>学籍番号</th><th>名前</th><th>回答</th><th>正解</th><th>判定</th></tr>
          </thead>
        <% web.forEach((list) => { %>
            <div>
                <tr>
                  <td><%= list.qualification_name_%></td>
                  <td><%= list.question_years%></td>
                  <td><%= list.question_name%></td>
                  <td><%= list.question_genre%></td>
                  <td><%= list.user_ID%></td>
                  <td><%= list.user_name %></td>
                  <td><%= list.userAnswer %></td>
                  <td><%= list.collectAnswer %></td>
                  <td><%= list.result %></td>
                </tr>
            </div>
        <% }) %>
      </table>
      <div class="button-container" id = "div1"></div>
      </div>
      </ul>
    </div>
    <form name ="my">
      <input type="submit" name="kekka" value="結果発表">
    </form>
    <input type="submit" class="button" name="button1" value="問題選択に戻る" onclick="osareta()"><br>
      <script>
        var socket = io();
        var f = document.forms.my;
        var col = table.rows.length;
        const div1 = document.getElementById("div1");
        const newDiv = document.createElement("div");
        var col = col;

        for(let i = 1;i<col;i++)
        {
          const newBtn = document.createElement("button");
          newBtn.innerHTML ="表示";
          newBtn.value =i;
          newBtn.style="width: 100px; height: 80px; display:flex; flex-flow: column; position: relative; top:35px; margin-bottom: 1px; text-align:center; justify-content: center;align-items:center;";
          newBtn.style="width: 100px; height: 60px; display:flex; flex-flow: column; position: relative; top:35px; margin-bottom: 1px; text-align:center; justify-content: center;align-items:center;";
          newBtn.onclick = () => {
            var cell = table.rows[i].cells[4].innerHTML;
            socket.emit('hyou',cell);
          }
          newDiv.appendChild(newBtn);
          div1.appendChild(newDiv);
        }

        f.kekka.addEventListener('click',function(e){
          e.preventDefault();
          socket.emit('result_display');
        })
        
        function osareta(){
            socket.emit('clear');
        }

        socket.on('modoru',function(){
          window.location.href='/mondai';
        })

        async function logout() {
            try {
                await new Promise((resolve, reject) => {
                    socket.emit('session_destroy', (response) => {
                        if (response.success) resolve();
                        else reject(response.error);
                    });
                });
                // 成功時はログインページにリダイレクト
                window.location.href = '/login';
            } catch (error) {
                alert('ログアウトに失敗しました: ' + error);
            }
        }
        
        socket.on('session_destroy_success', () => {
            window.location.href = '/login';
        });

        //セッション削除失敗時エラー処理
        socket.on('session_destroy_failed', (error) => {
            alert('ログアウトに失敗しました: ' + error);
        });
      </script>
  </body>
</html>