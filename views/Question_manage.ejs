<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ニコキタ教育委員会：問題管理</title>
    <link rel="stylesheet" href="/stylesheets/Question_manage.css">
</head>
<body>
        <header class="header">
            <div class="header-left">
                <button class="menu-button" id="hambtn" aria-label="メニュー">
                    <div class="menu-line"></div>
                    <div class="menu-line"></div>
                    <div class="menu-line"></div>
                </button>
                <h1>ニコキタ教育委員会：問題一覧</h1>
            </div>
            <div class="user">
                <% if (name) { %>
                    ユーザー：<%= name %>
                <% } else { %>
                    ユーザー：guest
                <% } %>
            </div>
        </header>

        <nav class="sidebar" id="sidebar">
            <a href="/main">メインページ</a>
            <a href="/mondai">問題出題</a>
            <a href="/Question_manage">問題管理</a>
            <a href="javascript:void(0);" onclick="logout()">ログアウト</a>
        </nav>
    <main>
        <div class="button-group">
            <button id="add-button">新規作成</button>
            <button id="edit-button">選択した問題の編集</button>
            <button id="delete-button">選択した問題の削除</button>
            <div class="search-container">
                <input type="search" id="search-box" placeholder="問題を検索">
                <span class="search-icon">🔍</span>
                <button id="search-button">検索</button>
            </div>
        </div>
        <form id="select-form">
            <table>
                <thead>
                    <tr>
                        <th>選択</th>
                        <th>資格名</th>
                        <th>ジャンル</th>
                        <th>年度</th>
                        <th>問題名</th>
                        <th>問題文</th>
                        <th>選択肢</th>
                        <th>写真名</th>
                        <th>正解</th>
                    </tr>
                </thead>
                <tbody>
                    <% questions.forEach(function(question) { %>
                        <tr>
                            <td><input type="radio" name="select" value="<%= question.question_id %>"></td>
                            <td class="ellipsis" onclick="toggleText(this)"><%= question.qualification_name %></td>
                            <td class="ellipsis" onclick="toggleText(this)"><%= question.question_genre %></td>
                            <td class="ellipsis" onclick="toggleText(this)"><%= question.question_years %></td>
                            <td class="ellipsis" onclick="toggleText(this)"><%= question.question_name %></td>
                            <td class="ellipsis" onclick="toggleText(this)"><%= question.question_text %></td>
                            <td class="ellipsis" onclick="toggleText(this)"><%= question.options %></td>
                            <td class="ellipsis" onclick="toggleText(this)"><%= question.pics_name %></td>
                            <td class="ellipsis" onclick="toggleText(this)"><%= question.answer %></td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>
            <div class="pagination">
                <% if (currentPage > 1) { %>
                    <a href="?page=<%= currentPage - 1 %>">&laquo; 前へ</a>
                <% } %>
        
                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <% if (i === currentPage) { %>
                            <span class="current-page"><%= i %></span>
                        <% } else { %>
                            <a href="?page=<%= i %>"><%= i %></a>
                        <% } %>
                    <% } %>
        
                    <% if (currentPage < totalPages) { %>
                        <a href="?page=<%= currentPage + 1 %>">次へ &raquo;</a>
                    <% } %>
                </div>
        </form>
    </main>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        var socket = io({ transports: ['websocket'], upgrade: false });

        // メニューの動作
        const menuButton = document.getElementById('hambtn');
        const sidebar = document.getElementById('sidebar');
        //const menuButton = document.getElementById('menu-button');
        const menuDropdown = document.getElementById('menu-dropdown');
        
        menuButton.addEventListener('click', () => toggleSidebar());
        document.addEventListener('click', (event) => closeSidebarOnOutsideClick(event));

        // メニューの開閉
        function toggleSidebar() {
            sidebar.classList.toggle('active');
        }

        function closeSidebarOnOutsideClick(event) {
            if (!menuButton.contains(event.target) && !sidebar.contains(event.target)) {
                sidebar.classList.remove('active');
            }
        }

        menuButton.addEventListener('click', () => {
            menuDropdown.classList.toggle('active');
        });

        document.addEventListener('click', (event) => {
            if (!menuButton.contains(event.target)) {
                menuDropdown.classList.remove('active');
            }
        });

        // 新規作成ボタン
        document.getElementById('add-button').addEventListener('click', function() {
            window.location.href = '/question_select';
        });

        // 編集ボタン
        document.getElementById('edit-button').addEventListener('click', function() {
            var selectedRadio = document.querySelector('input[name="select"]:checked');
            if (selectedRadio) {
                window.location.href = `/question_edit?question_ID=${selectedRadio.value}`;
            } else {
                alert('問題を選択してください。');
            }
        });

        // 削除ボタン
        document.getElementById('delete-button').addEventListener('click', function() {
            var selectedRadio = document.querySelector('input[name="select"]:checked');
            if (selectedRadio) {
                socket.emit('question_delete', selectedRadio.value);
            } else {
                alert('問題を選択してください。');
            }
        });

        socket.on('question_Complete', function() {
            window.location.reload();
        });

        // 検索ボタン
        document.getElementById('search-button').addEventListener('click', function() {
            var searchTerm = document.getElementById('search-box').value;
            socket.emit('search_question', searchTerm);
        });

        socket.on('questionsearchResult', function(results) {
            updateTable(results);
        });

        function updateTable(data) {
            var tbody = document.querySelector('#select-form tbody');
            tbody.innerHTML = ''; // テーブルの現在の内容をクリア

            data.forEach(function(question) {
                var tr = document.createElement('tr');
                tr.innerHTML = `
                    <td><input type="radio" name="select" value="${question.question_name}"></td>
                    <td class="ellipsis">${question.qualification_name}</td>
                    <td class="ellipsis">${question.question_genre}</td>
                    <td class="ellipsis">${question.question_years}</td>
                    <td class="ellipsis">${question.question_name}</td>
                    <td class="ellipsis">${question.question_text}</td>
                    <td class="ellipsis">${question.options}</td>
                    <td class="ellipsis">${question.pics_name}</td>
                    <td class="ellipsis">${question.correct}</td>
                `;
                tbody.appendChild(tr);
            });
        }

        function toggleText(element) {
            element.classList.toggle('ellipsis');
        }

        // ページリンクの動作
        /*document.getElementById('question-link').addEventListener('click', function(event) {
            event.preventDefault();
            socket.emit('pageupdate', 3);
        });

        socket.on('page_updatecomplete', function() {
            window.location.href = '/account';
        });*/

        async function logout() {
            try {
                await new Promise((resolve, reject) => {
                    socket.emit('session_destroy', (response) => response.success ? resolve() : reject(response.error));
                });
                navigateTo('/login');
            } catch (error) {
                alert('ログアウトに失敗しました: ' + error);
            }
        }

        socket.on('session_destroy_success', () => navigateTo('/login'));
        socket.on('session_destroy_failed', (error) => alert('ログアウトに失敗しました: ' + error));
    </script>
</body>
</html>
