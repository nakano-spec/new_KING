<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ニコキタ教育委員会：受付中</title>
    <link type="text/css" rel="stylesheet" href="/stylesheets/kaitou.css">
</head>
<body>
    <script src='/socket.io/socket.io.js'></script>
    <header class="header">
        <div class="header-left">
            <button class="menu-button" aria-label="メニュー">
                <div class="menu-line"></div>
                <div class="menu-line"></div>
                <div class="menu-line"></div>
            </button>
            <h1 class="header-title">ニコキタ教育委員会：受付中</h1>
        </div>
        <div class="header-user">ユーザー：<%= name %></div>
    </header>

    <nav class="sidebar" id="sidebar">
        <a href="javascript:void(0);" onclick="logout()">ログアウト</a>
    </nav>

    <main class="main-content">
        <h2 class="status-title">受付中</h2>
        <p class="status-message">しばらくお待ちください</p>
        <br>
        <div class="loader"></div>
    </main>
    <script>
        var socket = io({ transports: ['websocket'], upgrade: false });
        const room_ID = 'teacher';
        const role = 2
        if (room_ID) {
                socket.emit('join_room', { room_ID, role });
                console.log(`ルーム ${room_ID} に参加しました (役割: ${role})`);
        } else {
            console.error('ルームIDが指定されていません。');
        }
        const menuButton = document.querySelector('.menu-button'); // メニューボタンを取得
        const sidebar = document.getElementById('sidebar'); // サイドバーを取得
        const mainContent = document.querySelector('.main-content'); // メインコンテンツを取得

        // メニューボタンのクリックイベント
        menuButton.addEventListener('click', () => {
            sidebar.classList.toggle('active'); // サイドバーの表示切り替え
            mainContent.classList.toggle('sidebar-active'); // メインコンテンツの余白調整
        });

        // ドキュメント全体でクリックされたときの処理
        document.addEventListener('click', (event) => {
            if (!menuButton.contains(event.target) && !sidebar.contains(event.target)) {
                sidebar.classList.remove('active'); // サイドバーを非表示にする
                mainContent.classList.remove('sidebar-active'); // 余白調整を解除
            }
        });


        socket.on('student_answer_data', async function(data) {
            try{
                console.log(data);
                const queryString = new URLSearchParams({
                    room_ID: data.room_ID,
                    question_text: data.question_text,
                    options: JSON.stringify(data.options) // 配列をJSON文字列に変換
                }).toString();
                window.location.href =`/kaitou2?${queryString}`;   
            }catch(error){
                console.error(error);
            }   
        });

         //ログアウト処理
         async function logout() {
            try {
                await new Promise((resolve, reject) => {
                    socket.emit('session_destroy', (response) => {
                        if (response.success) resolve();
                        else reject(response.error);
                    });
                });
                // 成功時はログインページにリダイレクト
                window.location.href = '/login';
            } catch (error) {
                alert('ログアウトに失敗しました: ' + error);
            }
        }
        
        socket.on('session_destroy_success', () => {
            window.location.href = '/login';
        });
    </script>
</body>
</html>