<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ニコキタ教育委員会：アカウント一覧</title>
    <link rel="stylesheet" href="/stylesheets/account_list.css">
</head>
<body>
    <header class="header">
        <div class="header-left">
            <button class="menu-button" id="hambtn" aria-label="メニュー">
                <div class="menu-line"></div>
                <div class="menu-line"></div>
                <div class="menu-line"></div>
            </button>
            <h1>ニコキタ教育委員会：アカウント一覧</h1>
        </div>
        <div class="user">
            <% if (name) { %>
                ユーザー：<%= name %>
            <% } else { %>
                ユーザー：guest
            <% } %>
        </div>
    </header>

    <nav class="sidebar" id="sidebar">
        <a href="/admin_main">メインページ</a>
        <a href="/account_list">ユーザー管理</a>
        <a href="javascript:void(0);" onclick="logout()">ログアウト</a>
    </nav>

    <main class="main-content">
        <div class="action-buttons">
            <button id="add-button" class="action-button">新規追加</button>
            <button id="edit-button" class="action-button">選択したユーザーを編集</button>
            <button id="delete-button" class="action-button">選択したユーザーを削除</button>
            <div class="search-bname:req.session.user.usernameox">
                <input type="text" id="search-box" class="search-input" placeholder="ユーザーを検索" aria-label="ユーザー検索">
                <button id="search-button" class="search-button" aria-label="検索">検索</button>
            </div>
        </div>

        <form id="select-form">
            <div class="table-container">
                <table>
                    <thead>
                        <tr>
                            <th></th>
                            <th>学籍番号
                                <span class="sort-icon" onclick="sortTable('user_ID')">▲▼</span>
                            </th>
                            <th>名前
                                <span class="sort-icon" onclick="sortTable('user_name')">▲▼</span>
                            </th>
                            <th>最終ログイン日時
                                <span class="sort-icon" onclick="sortTable('log_time')">▲▼</span>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        <% data.forEach(function(row, index) { %>
                            <tr>
                                <td>
                                    <input type="radio" name="select" value="<%= row.user_ID %>"
                                        data-user-id="<%= row.user_ID %>"
                                        data-user-name="<%= row.user_name %>"
                                        data-log-time="<%= row.log_time %>">
                                </td>
                                <td data-column="user_ID"><%= row.user_ID %></td>
                                <td data-column="user_name"><%= row.user_name %></td>
                                <td data-column="log_time"><%= new Date(row.log_time).toLocaleString('ja-JP') %></td>
                            </tr>
                        <% }); %>
                    </tbody>
                </table>
            </div>
            <br>
            <button type="submit" class="action-button">選択</button>
        </form>

        <div class="pagination">
            <button class="pagination-button" aria-label="前のページ">←</button>
            <button class="pagination-button active">1</button>
            <button class="pagination-button">2</button>
            <button class="pagination-button">3</button>
            <button class="pagination-button" aria-label="次のページ">→</button>
        </div>
    </main>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        const menuButton = document.getElementById('hambtn');
        const sidebar = document.getElementById('sidebar');
        let sortDirection = 1;  // 1: 昇順、-1: 降順

        menuButton.addEventListener('click', () => toggleSidebar());
        document.addEventListener('click', (event) => closeSidebarOnOutsideClick(event));

        // メニューの開閉
        function toggleSidebar() {
            sidebar.classList.toggle('active');
        }

        function closeSidebarOnOutsideClick(event) {
            if (!menuButton.contains(event.target) && !sidebar.contains(event.target)) {
                sidebar.classList.remove('active');
            }
        }

        // 並べ替え処理
        function sortTable(column) {
            const tbody = document.querySelector('#select-form tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));

            rows.sort((a, b) => {
                const cellA = a.querySelector(`td[data-column="${column}"]`).textContent.trim();
                const cellB = b.querySelector(`td[data-column="${column}"]`).textContent.trim();

                // 日付列を特別に処理
                if (column === 'log_time') {
                    return sortDirection * (new Date(cellA) - new Date(cellB));
                }
        
                // 数字の場合と文字列の場合
                return sortDirection * (isNaN(cellA) ? cellA.localeCompare(cellB) : cellA - cellB);
            });

            // テーブルの内容を更新
            rows.forEach(row => tbody.appendChild(row));

            // 昇順・降順の切り替え
            sortDirection *= -1;
        }
        // ユーザー操作に応じた処理
        document.getElementById('select-form').addEventListener('submit', (event) => handleSubmit(event));
        document.getElementById('add-button').addEventListener('click', () => navigateTo('/account_additionMethod'));
        document.getElementById('edit-button').addEventListener('click', () => editSelectedUser());
        document.getElementById('delete-button').addEventListener('click', () => deleteSelectedUser());
        document.getElementById('search-button').addEventListener('click', () => searchAccounts());

        function handleSubmit(event) {
            event.preventDefault();
            navigateTo('/main?name=teacher');
        }

        function navigateTo(url) {
            window.location.href = url;
        }

        function editSelectedUser() {
            const selectedRadio = document.querySelector('input[name="select"]:checked');
            if (selectedRadio) {
                const userID = selectedRadio.getAttribute('data-user-id');
                const userName = selectedRadio.getAttribute('data-user-name');
                const logTime = selectedRadio.getAttribute('data-log-time');
                navigateTo(`/account_edit?userID=${encodeURIComponent(userID)}&userName=${encodeURIComponent(userName)}&logTime=${encodeURIComponent(logTime)}`);
            } else {
                alert('ユーザーを選択してください。');
            }
        }

        function deleteSelectedUser() {
            const selectedRadio = document.querySelector('input[name="select"]:checked');
            if (selectedRadio) {
                const userID = selectedRadio.getAttribute('data-user-id');
                socket.emit('account_delete', userID);
            } else {
                alert('ユーザーを選択してください。');
            }
        }

        socket.on('delete_complete', () => navigateTo('/account_list'));
        socket.on('account_delete',(error) => alert("アカウント削除に失敗しました。" + error));

        function searchAccounts() {
            const searchTerm = document.getElementById('search-box').value;
           socket.emit('search_accounts', searchTerm);
        }

        socket.on('search_results', (results) => updateTable(results));

        function updateTable(data) {
            const tbody = document.querySelector('#select-form tbody');
            tbody.innerHTML = '';
            data.forEach(row => {
                const tr = document.createElement('tr');
                tr.innerHTML = `<td><input type="radio" name="select" value="${row.user_ID}" data-user-id="${row.user_ID}" data-user-name="${row.user_name}" data-log-time="${row.log_time}"></td><td>${row.user_ID}</td><td>${row.user_name}</td><td>${new Date(row.log_time).toLocaleString('ja-JP')}</td>`;
                tbody.appendChild(tr);
            });
        }

        async function logout() {
            try {
                await new Promise((resolve, reject) => {
                    socket.emit('session_destroy', (response) => response.success ? resolve() : reject(response.error));
                });
                navigateTo('/login');
            } catch (error) {
                alert('ログアウトに失敗しました: ' + error);
            }
        }

        socket.on('session_destroy_success', () => navigateTo('/login'));
        socket.on('session_destroy_failed', (error) => alert('ログアウトに失敗しました: ' + error));
    </script>
</body>
</html>
