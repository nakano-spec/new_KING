<!DOCTYPE html>
<html lang ="ja">
    <head>
        <meta charset="utf-8">
        <title>回答</title>
        <link type="text/css" rel="stylesheet" href="/stylesheets/kaitou2.css">
    </head>
    <body>
        <header class="header">
            <div class="header-title">ニコキタ教育委員会：解答</div>
            <div>ユーザー：<%= name %></div>
        </header>
        <script src ="/socket.io/socket.io.js"></script>
        <h1><%= question_text %></h1>
        <div class="buttons">
            <!-- 動的にボタンを生成 -->
        </div>
        <div class="textarea-container" style="display: none;">
            <textarea id="freeTextAnswer" rows="6" cols="50" placeholder="あなたの回答を入力してください"></textarea><br>
            <button id="submitTextAnswer">送信</button>
        </div>
        <!-- 確認モーダル-->
        <div class="modal" id="confirmationModal">
            <div class="modal-content">
                回答はこれでよろしいでしょうか？
                <div class="highlight" id="selectedAnswer"></div>
            </div>
            <div class="modal-buttons">
                <button id="confirmYes">はい</button>
                <button id="confirmNo">いいえ</button>
            </div>
        </div>
        <div class="overlay" id="overlay"></div>
        <script>
            // サーバーに解答を送信
            const socket = io({ transports: ['websocket'], upgrade: false });
            const roomID = 'teacher';
            const role = 2
            if (roomID) {
                    socket.emit('join_room', { roomID, role });
                    console.log(`ルーム ${roomID} に参加しました (役割: ${role})`);
            } else {
                console.error('ルームIDが指定されていません。');
            }
            const urlParams = new URLSearchParams(window.location.search);
            const room_ID = urlParams.get('name');
            const question_text = urlParams.get('question_text');
            const options = JSON.parse(urlParams.get('options'));
            console.log(options)
            // HTML要素を取得
            const buttonContainer = document.querySelector(".buttons");

            //モーダル関連要素取得
            const modal = document.getElementById('confirmationModal');
            const overlay = document.getElementById('overlay');
            const selectedAnswer = document.getElementById('selectedAnswer');
            const confirmYes = document.getElementById('confirmYes');
            const confirmNo = document.getElementById('confirmNo');
            const textareaContainer = document.querySelector(".textarea-container");
            if(options[0] != null){
                options.sort((a, b) => a.localeCompare(b, 'en', { sensitivity: 'base' }));
                //選択肢処理
                options.forEach(item => {
                    // 確実にString型に変換
                    const strItem = String(item);

                    // 「:」「：」「；」を「:」に正規化
                    const normalizedItem = strItem.replace(/[：；]/g, ":");

                    const [left,right] = normalizedItem.split(":")
                
                    // ボタンを追加
                    const button = document.createElement("button");
                    button.textContent = item.trim();
                    button.value = left.trim(); // ボタンの値に左側を設定
                    buttonContainer.appendChild(button);

                    // ボタンクリック時の処理
                    button.addEventListener("click", () => {
                        currentAnswer = left;
                        selectedAnswer.textContent = item.trim();
                        modal.style.display = 'block';
                        overlay.style.display = 'block';
                    });
                });   
            }else{
                const button = document.createElement("button");
                textareaContainer.style.display = 'block';

                // テキストエリアの送信ボタンのクリックイベントを設定
                document.getElementById('submitTextAnswer').addEventListener('click', () => {
                    const freeText = document.getElementById('freeTextAnswer').value.trim();
                    if (freeText === '') {
                        alert('回答を入力してください');
                        return;
                    }

                    currentAnswer = freeText;
                    selectedAnswer.textContent = freeText;
                    modal.style.display = 'block';
                    overlay.style.display = 'block';
                });
            }

             // モーダルの「はい」ボタン処理
             confirmYes.addEventListener('click', () => {
                    alert(`回答を送信しました！`);
                    console.log(currentAnswer);
                    modal.style.display = 'none';
                    overlay.style.display = 'none';
                    socket.emit('answer', { answer: currentAnswer });
            });

            // モーダルの「いいえ」ボタン処理
            confirmNo.addEventListener('click', () => {
                modal.style.display = 'none';
                overlay.style.display = 'none';
            });

            // サーバーからの「insert_error」イベントを受け取る
            socket.on('insert_error', (message) => {
                console.log("エラー:", message);
                alert(message); // 必要に応じてアラート表示
            });

            socket.on('end', () => {
                window.confirm("制限時間になりました");
                socket.emit('answer', { answer: "timeup" });
            });

            // サーバーからの「data_result」イベントを受け取る
            socket.on('data_result', (message) => {
                alert(message); // 必要に応じてアラート表示
                window.location.href='kaitou3'
            });
        </script>
    </body>
</html>